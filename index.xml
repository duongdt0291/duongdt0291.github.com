<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>duongdt&#39;s blog</title>
    <link>/</link>
    <description>Recent content on duongdt&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nodejs Core Module: Buffer (P2)</title>
      <link>/2021/05/nodejs-core-module-buffer-p2/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/05/nodejs-core-module-buffer-p2/</guid>
      <description>JS không cung cấp công cụ để làm việc trực tiếp với binary data (dữ liệu lưu dưới dạng mã nhị phân). Việc này không gây quá nhiều ảnh hưởng ở môi trường trình duyệt. Tuy nhiên, trên server, có rất nhiều tác vụ phải xử lí binary data. Nếu chỉ dùng những gì JS cung cấp thì việc xử lí sẽ rất chậm, do vậy Nodejs đã phát triển và cung cấp 1 công cụ khác để giải quyết vấn đề này. Đó là Buffer.</description>
    </item>
    
    <item>
      <title>Nodejs Core Module: Events (P1)</title>
      <link>/2021/05/nodejs-core-module-events-p1/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/05/nodejs-core-module-events-p1/</guid>
      <description>EventEmitter có thể nói chính là linh hồn của Nodejs trong việc triển khai kiến trúc hướng sự kiện. Không chỉ class Server, mà rất nhiều class ở các module khác nhau đều kế thừa từ class này.</description>
    </item>
    
    <item>
      <title>JS Concept: Callback, Promise &amp; Async/await (P7)</title>
      <link>/2021/04/js-concept-callback-promise-async/await-p7/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/04/js-concept-callback-promise-async/await-p7/</guid>
      <description>&lt;strong&gt;Callback&lt;/strong&gt; là 1 hàm A được sử dụng như tham số truyền vào của hàm B khác. Hàm A được gọi ngay lập tức hoặc trễ một chút sau khi hàm B được gọi (cơ chế rất phù hợp với tên gọi của nó đúng không? Callback dịch ra chính là gọi lại sau).</description>
    </item>
    
    <item>
      <title>JS Concept: Call Stack, Event Loop (P6)</title>
      <link>/2021/04/js-concept-call-stack-event-loop-p6/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/04/js-concept-call-stack-event-loop-p6/</guid>
      <description>JS là 1 ngôn ngữ đơn luồng (&lt;strong&gt;Single-thread&lt;/strong&gt;), tức là tại 1 thời điểm chỉ có duy nhất 1 dòng lệnh được thực hiện. Vậy tại sao chỉ với 1 thread, mà JS vẫn có thể xử lí nhiều tác vụ cùng lúc đến vậy?</description>
    </item>
    
    <item>
      <title>Git 101: Thư mục .git (P5)</title>
      <link>/2021/03/git-101-th%C6%B0-m%E1%BB%A5c-.git-p5/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/03/git-101-th%C6%B0-m%E1%BB%A5c-.git-p5/</guid>
      <description>Đến bài này trong series, thì chúng ta có thể công nhận git rất vi diệu đúng không? Vậy sự vi diệu của git đến từ đâu, git lưu dữ liệu như thế nào để có thể làm được những điều đó? Câu trả lời nằm trong thư mục &lt;strong&gt;.git.&lt;/strong&gt;.</description>
    </item>
    
    <item>
      <title>Git 101: HEAD, git checkout, reset, revert &amp; restore (P4)</title>
      <link>/2021/03/git-101-head-git-checkout-reset-revert-restore-p4/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/03/git-101-head-git-checkout-reset-revert-restore-p4/</guid>
      <description>Trước kia mỗi lần gõ lệnh git log, mình lại hay thấy có HEAD → develop, lúc đấy chẳng hiểu HEAD là cái quái gì, mà nói thật là lười. ko hiểu nó vẫn thấy sống tốt nên kệ. Tuy nhiên, phải nói đây cũng là 1 thành phần quan trọng, mà nếu hiểu nó, chúng ta sẽ dễ dàng làm việc hơn với git. Ok, cùng bắt đầu tìm hiểu nào.</description>
    </item>
    
    <item>
      <title>Git 101: Stash (P3)</title>
      <link>/2021/03/git-101-stash-p3/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/03/git-101-stash-p3/</guid>
      <description>Giả sử bạn đang sửa 1 đống file ở 1 branch feature nào đấy, đột nhiên xuất hiện lỗi ở production, bắt buộc bạn phải switch sang nhánh master để sửa nhanh xong sẽ quay lại nhánh hiện tại, trong trường hợp này phải xử lí sao với đống file đang sửa bây giờ?</description>
    </item>
    
    <item>
      <title>Git 101: Merge vs Rebase (P2)</title>
      <link>/2021/02/git-101-merge-vs-rebase-p2/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/02/git-101-merge-vs-rebase-p2/</guid>
      <description>Ở bài trước chúng ta đã tìm hiểu cơ bản về branch. Giờ chuyển branch và viết tính năng mới xong rồi, vậy làm sao để chuyển code ở nhánh mới về lại nhánh chính (ở đây mình coi như là master)?</description>
    </item>
    
    <item>
      <title>Git 101: Add, Commit &amp; Branch (P1)</title>
      <link>/2021/02/git-101-add-commit-branch-p1/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/02/git-101-add-commit-branch-p1/</guid>
      <description>VCS là 1 chương trình theo dõi và quản lý sự thay đổi của file, giúp chúng ta có thể xem lại những đoạn code cũ, so sánh và thay đổi về 1 version trong quá khứ,&amp;hellip; Có rất nhiều VCS, và trong số đó nổi tiếng nhất, phổ biến nhất là Git.</description>
    </item>
    
    <item>
      <title>JS Concept: Constructor function, Class (P5)</title>
      <link>/2021/01/js-concept-constructor-function-class-p5/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/01/js-concept-constructor-function-class-p5/</guid>
      <description>Constructor function cũng như function thông thường khác trong JS. Tuy nhiên khi sử dụng cần thêm từ khóa &lt;code&gt;new&lt;/code&gt; , và thường được viết hoa chữ cái đầu tiên để phân biệt với các function bình thường khác.</description>
    </item>
    
    <item>
      <title>JS Concept: Prototypal Inheritance (P4)</title>
      <link>/2021/01/js-concept-prototypal-inheritance-p4/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/01/js-concept-prototypal-inheritance-p4/</guid>
      <description>Mọi object trong JS đều có thuộc tính ẩn &lt;code&gt;[[Prototype]]&lt;/code&gt; . Thuộc tính này có giá trị là null hoặc đường dẫn đến 1 object khác. Object này được gọi là &amp;lsquo;1 prototype&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>JS Concept: Object (P3)</title>
      <link>/2021/01/js-concept-object-p3/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/01/js-concept-object-p3/</guid>
      <description>Các thuộc tính (property) trong 1 object không chỉ đơn thuần chứa các giá trị mà còn có các tính chất khác (descriptor). Để xem các tính chất này, chúng ta dùng &lt;code&gt;Object.getOwnPropertyDescriptor(obj)&lt;/code&gt; .</description>
    </item>
    
    <item>
      <title>JS Concept: This (P2)</title>
      <link>/2021/01/js-concept-this-p2/</link>
      <pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/01/js-concept-this-p2/</guid>
      <description>Từ khóa &lt;strong&gt;this&lt;/strong&gt; là 1 trong những vấn đề dễ gây đau đầu và nhầm lẫn nhất cho những người mới tiếp xúc với JS. Vậy &lt;strong&gt;this&lt;/strong&gt; là quái gì?</description>
    </item>
    
    <item>
      <title>JS Concept: Execution Context, Hoisting, Scope And Closure (P1)</title>
      <link>/2021/01/js-concept-execution-context-hoisting-scope-and-closure-p1/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/01/js-concept-execution-context-hoisting-scope-and-closure-p1/</guid>
      <description>Execution context là 1 khái niệm trừu tượng. Đó là nơi chứa thông tin về môi trường và đoạn code sẽ được thực thi. Mọi dòng code trong JS khi được chạy đều nằm trong 1 execution context.</description>
    </item>
    
  </channel>
</rss>
